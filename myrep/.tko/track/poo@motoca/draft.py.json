{
    "patches": [
        {
            "label": "2025-10-25_16-25-12",
            "content": "class Pessoa:\n    def __init__(self, age:int , name:str):\n        self.__age = age\n        self.__name = name\n    \n    def getName(self):\n        return self.__name\n\n    def get_age(self):\n        return self.__age\n    \n    def __str__(self):\n        return f'{self.__name}:{self.__age}'\n\nclass Motoca:\n    def __init__(self, potencia: int, time:int, pessoa: Pessoa):\n        self.__potencia = potencia\n        self.__time = time\n        self.__pessoa = None\n\n\n    \n    def inserir(self, pessoa: Pessoa):\n        if self.__pessoa != None:\n            print(\"fail: busy motorcycle\")\n            return False\n        self.__pessoa = pessoa\n        return True\n    \n\n    \n    def remover(self, pessoa: Pessoa):\n        if self.__pessoa == None:\n            print(\"fail: empty motorcycle\")\n            self.__pessoa = None\n        else:\n            print(pessoa)\n        aux = self.__pessoa\n        self.__pessoa = None\n        return aux\n    \n\n    \n    def buyTime(self, time: int):\n        self.__time += time\n        return self.__time\n    \n\n    \n    def drive(self, time: int):\n        if self.__time == 0:\n            print(\"fail: buy time first\")\n\n        elif self.__pessoa == None:\n            print(\"fail: empty motorcycle\")\n\n\n        elif self.__pessoa.get_age() > 10 :\n            print(\"fail: too old to drive\")\n            \n        elif time > self.__time:\n            time -= self.__time\n            print(f\"fail: time finished after {self.__time} minutes\")\n            self.__time = 0\n\n        elif time <=0:\n            print(\"fail: time finished after X minutes\")\n\n        else: \n            self.__time -= time\n        return self.__time\n    \n\n    def honk(self):\n        buzina = \"P\" + \"e\"* self.__potencia + \"m\"\n        return f\"{buzina}\"\n    \n    def __str__(self):\n        if self.__pessoa is None:\n            return f\"power:{self.__potencia}, time:{self.__time}, person:(empty)\"\n        else:\n            return f\"power:{self.__potencia}, time:{self.__time}, person:({self.__pessoa})\"\n    \ndef main():\n    motoca = Motoca(1, 0, \"\")\n    pessoa = Pessoa(\"\", \"\")\n    while True:\n        line: str = input()\n        print(\"$\" + line)\n        args: list[str] = line.split()\n        \n        if args[0] == \"end\":\n            break\n\n        if args[0] == \"show\":\n            print(motoca)\n\n        if args[0] == \"enter\":\n            nome = args[1]\n            idade = int(args[2])\n\n            pessoa = Pessoa(idade, nome)\n            motoca.inserir(pessoa)\n\n        if args[0] == \"init\":\n            potencia = int(args[1])\n            motoca = Motoca(potencia, 0, None)\n\n        if args[0] == \"leave\":\n            motoca.remover(pessoa)\n            \n        if args[0] == \"buy\":\n            time = int(args[1])\n            motoca.buyTime(time)\n\n        if args[0] == \"drive\":\n            time = int(args[1])\n            motoca.drive(time)\n\n        if args[0] == \"honk\":\n            print(motoca.honk())\n\n\nmain()\n\n",
            "lines": "125"
        }
    ]
}